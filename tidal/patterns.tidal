d1 $ stack [sound "<bd [~ bd] [bd ~ ~ bd] [~ bd bd ~]> [sd <~ bd [~ bd] ~>]",
            slow 4 $ struct "t*4 [t*32 t*6] t*4 t*6" $ sound "hc" 
            # speed 2
           ]
           # cps 0.38


d1 $ chunk 4 (hurry 2) 
   $ iter 4 $ n "0 1 [~ 1] 0 0 [2 4] 3 4*2 1" # sound "cpu"


d1 $ loopAt 4 $ chop 64 $ sound "bev2:1"
  # gain 1.1

hush

d2 $ jux rev $ chop 150 $ chunk 4 (|+ n 100) $ n "{30 31 [34 46] 40, [~ 60] 64 ~ ~ 32}%5" # sound "deva3"
  # legato 4
  # gain 1.6(
  # speed ("^carpet" *2)
  |+ n "<200>"

d1 $ stack $ map (\i -> while ((>=0) <$> (cF 0 ("carpet" ++ show i))) (const silence) $ n (pure i) # sound "cpu2") [0 .. 13]

d1 $ stack $ map (\i -> slow ((cR 0 ("carpet" ++ show i)) |+ 1) $ sound "cpu2" # pan ((fromIntegral i)/13)) ([0 .. 13] :: [Int])

let carpet i = (cR 0 ("carpet" ++ show i))

d1 $ stack $ map (\i -> slow ((carpet i) |+ 1 |* 4) $ sound "deva3" 
  # n (pure $ Note $ fromIntegral i)
  # pan ((fromIntegral i)/13)
  # legato 1
  ) ([0 .. 13] :: [Int])
  
let pani :: Int -> ControlPattern
    pani i = pan (fromIntegral i / 13)
    carpet i = (cR 0 ("carpet" ++ show i))
    hairf = "^hairL"
    hairr :: Pattern Rational
    hairr = "^hairL"

d1 $ sound "bd*16" # speed (fromRational <$> carpet 0)



d1 $ superimpose (rev . (# s "<deva3>") . (# gain 1.8)) $ chunk 4 (ply 2) $ stack [
  mask ((> 0.5) <$> carpet 0) $ n "{0 ~ ~}%4" # pani 0,
  mask ((> 0.5) <$> carpet 1) $ n "{1 ~ [1 1]!3 ~ 1 ~}%4" # pani 1,
  mask ((> 0.7) <$> carpet 2) $ n "{2 ~ 2 ~ ~}%4" # pani 2,
  mask ((> 0.6) <$> carpet 3) $ n "{3 ~ ~ 3 ~ 3}%4" # pani 3,
  mask ((> 0.5) <$> carpet 4) $ n "{4 ~ 4 4}%4" # pani 4,
  mask ((> 0.5) <$> carpet 5) $ n "{5 ~ ~ [5 5] 5}%4" # pani 5,
  mask ((> 0.5) <$> carpet 6) $ n "{6 7*3 ~ 6*2}%6" # pani 6,
  mask ((> 0.5) <$> carpet 7) $ n "{7 ~ ~ 7 7}%4" # pani 7,
  mask ((> 0.6) <$> carpet 8) $ n "{8 8 ~}%4" # pani 8,
  mask ((> 0.6) <$> carpet 9) $ n "{9 ~ [~ 9]}%4" # pani 9,
  mask ((> 0.7) <$> carpet 10) $ n "{10 ~ ~ 10 10*2}%4" # pani 10,
  mask ((> 0.6) <$> carpet 11) $ n "{11 11 ~ 11 ~ 11}%4" # pani 11,
  mask ((> 0.5) <$> carpet 12) $ n "{12 10 ~ 11 11}%4" # pani 12
] # s "<kimkim taiko celtic>" |+ n "<100 200>" # legato 0.2 # gain 1.1 # delayt (1/3) 
  # lock 1 # delayfb 0.3 # s "kimkim" # gain 1.2


d1 $ mask ((>0.3) <$> carpet 1) $ sound "bd*8"


let thresh = 0.5
in
d1 $ chunk 4 (hurry 1.5) $ (s "[juan|deva3]" # legato 5) >| (chunk 4 (ply 8) $ stack [
  mask ((> thresh) <$> carpet 0) $ n "{0 ~ ~ 0 ~ 0 ~ }%4" # pani 0,
  mask ((> thresh) <$> carpet 1) $ n "{1 ~ [1 1]@3 ~ ~ ~}%4" # pani 1,
  mask ((> thresh) <$> carpet 2) $ n "{2 ~ 2 ~ 2*2 ~}%4" # pani 2 # legato 1,
  mask ((> thresh) <$> carpet 3) $ n "{3 ~ ~ 3 ~ 3}%4" # pani 3 # s "kimkim",
  mask ((> thresh) <$> carpet 4) $ n "{4 ~ ~ 4}%4" # pani 4 # legato 8,
  mask ((> thresh) <$> carpet 5) $ n "{5 ~ ~ [5 5] 5}%4" # pani 5,
  mask ((> thresh) <$> carpet 6) $ n "{6 6 ~ 6*2}%6" # pani 6,
  mask ((> thresh) <$> carpet 7) $ n "{7 ~ ~ 7 7}%4" # pani 7 # s "kimkim",
  mask ((> thresh) <$> carpet 8) $ n "{8 ~ 8 ~}%4" # pani 8 # legato 4,
  mask ((> thresh) <$> carpet 9) $ n "{9 ~ 9 ~ [~ 9]}%4" # pani 9,
  mask ((> thresh) <$> carpet 10) $ n "{10 ~ ~ 10 ~}%4" # pani 10 # s "liquiddrum",
  mask ((> thresh) <$> carpet 11) $ n "{11 ~ ~ 11 ~ 11}%4" # pani 11,
  mask ((> thresh) <$> carpet 12) $ n "{12 ~ 12 ~ 12}%4" # pani 12
] |+ n "<100 300>" # gain 1.1
  -- # delay 0.9 # delayt (1/3) 
  # lock 1 # delayfb 0.3 # gain 1.6)
  # legato 100
  |+ n 2

d1 $ n "0 .. 7" # s "bothbreath"


-- breathfold
let thresh = 0.5
in
d1 $ chunk 4 (hurry 0.5) $ (s "[devabreath, juanbreath]" # legato 1) >| (chunk 4 (ply 4) $ stack [
  mask ((> thresh) <$> carpet 0) $ n "{0 ~ ~ 0 ~ 0 ~ }%4" # pani 0,
  mask ((> thresh) <$> carpet 1) $ n "{1 ~ [1 1]@3 ~ ~ ~}%4" # pani 1,
  mask ((> thresh) <$> carpet 2) $ n "{2 ~ 2 ~ 2*2 ~}%4" # pani 2 # legato 1,
  mask ((> thresh) <$> carpet 3) $ n "{3 ~ ~ 3 ~ 3}%4" # pani 3,
  mask ((> thresh) <$> carpet 4) $ n "{4 ~ ~ 4}%4" # pani 4 # legato 8,
  mask ((> thresh) <$> carpet 5) $ n "{5 ~ ~ [5 5] 5}%4" # pani 5,
  mask ((> thresh) <$> carpet 6) $ n "{6 6 ~ 6*2}%6" # pani 6,
  mask ((> thresh) <$> carpet 7) $ n "{7 ~ ~ 7 7}%4" # pani 7,
  mask ((> thresh) <$> carpet 8) $ n "{8 ~ 8 ~}%4" # pani 8 # legato 4,
  mask ((> thresh) <$> carpet 9) $ n "{9 ~ 9 ~ [~ 9]}%4" # pani 9,
  mask ((> thresh) <$> carpet 10) $ n "{10 ~ ~ 10 ~}%4" # pani 10,
  mask ((> thresh) <$> carpet 11) $ n "{11 ~ ~ 11 ~ 11}%4" # pani 11,
  mask ((> thresh) <$> carpet 12) $ n "{12 ~ 12 ~ 12}%4" # pani 12
] |+ n "<100 300 500 50>" # gain 1.1
  -- # delay 0.9 # delayt (1/3) 
  # lock 1 # delayfb 0.3 # gain 1.6)
  # legato 0.25
  |+ n 2


d2 $ jux rev $ chunk 4 (hurry 2) $ sound "kick:4 snare:4 [~ kick:4] snare:4"
  # speed 2
d2 silence
d3 $ chunk 4 (hurry 2) $ n "0 .. 7" # sound "cpu"

hush
  
d1 $ rev $ mask ((0.25 <) <$> "^kneeDa") $ splice 8 (chunk 4 (fast 2)$ segment 8 $ floor <$> "^kneeDa" *| 8) $ sound "break:8"
  # pan 1
  # speed "^kneeDa"


tickTarget :: Target
tickTarget = Target {oName = "Tick",
                     oAddress = "127.0.0.1",
                     oPort = 1234,
                     oBusPort = Nothing,
                     oLatency = 0.02,
                     oWindow = Nothing,
                     oSchedule = Live,
                     oHandshake = False
                    }

tickShape :: OSC
tickShape = OSC "/tick" $ ArgList [("tick", iDefault 0),
                                   ("cps", fDefault 0),
                                   ("cycle", fDefault 0)]


tidal2 <- startStream defaultConfig [(tickTarget, [tickShape])] 

streamReplace tidal2 1 $ pI "tick" "0 .. 15"


d1 $ gain (cP "carpetp" |* 2) # s "bd ! ! ! ! clap:4"

d1 $ sound "bd(3,8)" # gain "^hello"

hush

setcps $ 150/120/4

d1 $ sound "bd*8"

hush


setcps 0.3


d1 $ sound "[bd(7,12,<3 5>)]*2%3"
  # legato 1 # lpf 1000 # lpq 0.1
  # room 0.3 # sz 0.3

d2 $ chunk 4 (hurry 2) $ sound "phkick:5!7 clap:5" # speed "2 4"

d3 $ slow 2 $ (jux rev $ chunk 4 (hurry 2) $ n "0 .. 15"
  # sound "ord")
  |+ n "<0 0 0 4>"
  # legato 1
  # gain 1.6



d4 $ jux (rev . (# n "<1 1 2 2 3 0>") . (# s "devalong")) $ fast 2 $ splice 32 (every 2 (slow 2) $ segment 4 $ (fast 2 $ floor <$> range 0 4 perlin))
  $  sound "<devalong>"
  |* speed "[1,1.02]"
  # djf 0.85
  # room 0.3
  # sz 0.3
  # n "<3 2 1>"
  # gain 1.4


d5 $ jux press $
  stut 4 0.25 "s"
  $ sound "{phkick:5*2 ~ [~ clap:4] ~ snare:4 ~ ~ snare:5}%4"
  # speed 2
  # gain 0.8



d12 $ cps (segment 32 $ range 0.8 1.1 $ perlin)




